{"ast":null,"code":"// import { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { useAuth } from '@/context/AuthContext';\n// import { useData } from '@/context/DataContext';\n// import { submitVideo } from '@/services/videoService';\n\n// type UrlFormProps = {\n//     setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;\n// };\n\n// export default function UrlForm({ setIsLoading }: UrlFormProps) {\n\n//     const [url, setUrl] = useState('');\n\n//     const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n//         e.preventDefault();\n//         onSubmit(url);\n//     }\n\n//     const navigate = useNavigate(); //permite navegação de página\n//     const { isAuthenticated } = useAuth(); //logout removido(adicionar se necessário)\n//     const { setVideoData } = useData();\n\n//     async function onSubmit(url: string) {\n//         // Verifica se o usuário está logado\n//         if (!isAuthenticated) {\n//             navigate('/plans');\n//             return;\n//         }\n\n//         setIsLoading(true); //abre página de espera\n\n//         try {\n//             const result = await submitVideo(url);\n//             // Armazenando no localStorage(mudar para backend depois)\n//             // localStorage.setItem('video_data', JSON.stringify(result));\n\n//             setVideoData(result);\n\n//             setIsLoading(false); //fecha página de espera\n//             navigate('/questions'); //encaminha para questions\n//         } catch (err: any) {\n//             console.error('Erro ao processar vídeo:', err);\n//             alert('Erro ao processar o vídeo. Verifique o link e tente novamente.');\n//             setIsLoading(false);\n//         }\n//     }\n\n//     return (\n//         <form\n//             action=\"#\"\n//             method=\"POST\"\n//             className=\"flex max-w-[100%] gap-2 items-center\"\n//             onSubmit={handleSubmit}>\n//             <input\n//                 type=\"url\"\n//                 name=\"videoURL\"\n//                 value={url}\n//                 placeholder=\"Enter a valid YouTube URL\"\n//                 onChange={(e) => setUrl(e.target.value)}\n//                 required\n//                 className=\"flex-1 h-[45px] px-3 rounded-xl border border-gray-300 text-gray-800 shadow-sm outline-none transition duration-300 focus:border-gray-500 focus:shadow-md\"\n//             />\n//             <button\n//                 type=\"submit\"\n//                 className=\"h-[45px] px-4 bg-[#325239] text-white rounded-lg font-semibold transition duration-200 hover:shadow-md active:scale-[0.98]\"\n//             >Pesquisar</button>\n//         </form>\n//     )\n// }","map":{"version":3,"names":[],"sources":["C:/Users/carlo/OneDrive/Documentos/GitHub/brainboost/frontend/src/components/UrlForm/urlForm.tsx"],"sourcesContent":["// import { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { useAuth } from '@/context/AuthContext';\r\n// import { useData } from '@/context/DataContext';\r\n// import { submitVideo } from '@/services/videoService';\r\n\r\n// type UrlFormProps = {\r\n//     setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;\r\n// };\r\n\r\n// export default function UrlForm({ setIsLoading }: UrlFormProps) {\r\n\r\n//     const [url, setUrl] = useState('');\r\n\r\n//     const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n//         e.preventDefault();\r\n//         onSubmit(url);\r\n//     }\r\n\r\n//     const navigate = useNavigate(); //permite navegação de página\r\n//     const { isAuthenticated } = useAuth(); //logout removido(adicionar se necessário)\r\n//     const { setVideoData } = useData();\r\n\r\n//     async function onSubmit(url: string) {\r\n//         // Verifica se o usuário está logado\r\n//         if (!isAuthenticated) {\r\n//             navigate('/plans');\r\n//             return;\r\n//         }\r\n\r\n//         setIsLoading(true); //abre página de espera\r\n\r\n//         try {\r\n//             const result = await submitVideo(url);\r\n//             // Armazenando no localStorage(mudar para backend depois)\r\n//             // localStorage.setItem('video_data', JSON.stringify(result));\r\n\r\n//             setVideoData(result);\r\n\r\n//             setIsLoading(false); //fecha página de espera\r\n//             navigate('/questions'); //encaminha para questions\r\n//         } catch (err: any) {\r\n//             console.error('Erro ao processar vídeo:', err);\r\n//             alert('Erro ao processar o vídeo. Verifique o link e tente novamente.');\r\n//             setIsLoading(false);\r\n//         }\r\n//     }\r\n\r\n//     return (\r\n//         <form\r\n//             action=\"#\"\r\n//             method=\"POST\"\r\n//             className=\"flex max-w-[100%] gap-2 items-center\"\r\n//             onSubmit={handleSubmit}>\r\n//             <input\r\n//                 type=\"url\"\r\n//                 name=\"videoURL\"\r\n//                 value={url}\r\n//                 placeholder=\"Enter a valid YouTube URL\"\r\n//                 onChange={(e) => setUrl(e.target.value)}\r\n//                 required\r\n//                 className=\"flex-1 h-[45px] px-3 rounded-xl border border-gray-300 text-gray-800 shadow-sm outline-none transition duration-300 focus:border-gray-500 focus:shadow-md\"\r\n//             />\r\n//             <button\r\n//                 type=\"submit\"\r\n//                 className=\"h-[45px] px-4 bg-[#325239] text-white rounded-lg font-semibold transition duration-200 hover:shadow-md active:scale-[0.98]\"\r\n//             >Pesquisar</button>\r\n//         </form>\r\n//     )\r\n// }"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}