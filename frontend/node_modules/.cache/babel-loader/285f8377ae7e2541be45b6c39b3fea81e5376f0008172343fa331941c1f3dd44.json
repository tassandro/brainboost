{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carlo\\\\OneDrive\\\\Documentos\\\\GitHub\\\\brainboost\\\\frontend\\\\src\\\\components\\\\UrlForm\\\\urlForm.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/context/AuthContext';\nimport { useData } from '@/context/DataContext';\nimport { submitVideo } from '@/services/videoService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UrlForm({\n  setIsLoading\n}) {\n  _s();\n  const [url, setUrl] = useState('');\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(url);\n  };\n  const navigate = useNavigate(); //permite navegação de página\n  const {\n    isAuthenticated\n  } = useAuth(); //logout removido(adicionar se necessário)\n  const {\n    setVideoData\n  } = useData();\n  async function onSubmit(url) {\n    // Verifica se o usuário está logado\n    if (!isAuthenticated) {\n      navigate('/plans');\n      return;\n    }\n    setIsLoading(true); //abre página de espera\n\n    try {\n      const result = await submitVideo(url);\n      // Armazenando no localStorage(mudar para backend depois)\n      // localStorage.setItem('video_data', JSON.stringify(result));\n\n      setVideoData(result);\n      setIsLoading(false); //fecha página de espera\n      navigate('/questions'); //encaminha para questions\n    } catch (err) {\n      console.error('Erro ao processar vídeo:', err);\n      alert('Erro ao processar o vídeo. Verifique o link e tente novamente.');\n      setIsLoading(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    action: \"#\",\n    method: \"POST\",\n    className: \"flex max-w-[100%] gap-2 items-center\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"url\",\n      name: \"videoURL\",\n      value: url,\n      placeholder: \"Enter a valid YouTube URL\",\n      onChange: e => setUrl(e.target.value),\n      required: true,\n      className: \"flex-1 h-[45px] px-3 rounded-xl border border-gray-300 text-gray-800 shadow-sm outline-none transition duration-300 focus:border-gray-500 focus:shadow-md\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"h-[45px] px-4 bg-[#325239] text-white rounded-lg font-semibold transition duration-200 hover:shadow-md active:scale-[0.98]\",\n      children: \"Pesquisar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(UrlForm, \"us4ryxp7hJ9n0kN0lFa7TxDIrlU=\", false, function () {\n  return [useNavigate, useAuth, useData];\n});\n_c = UrlForm;\nvar _c;\n$RefreshReg$(_c, \"UrlForm\");","map":{"version":3,"names":["useState","useNavigate","useAuth","useData","submitVideo","jsxDEV","_jsxDEV","UrlForm","setIsLoading","_s","url","setUrl","handleSubmit","e","preventDefault","onSubmit","navigate","isAuthenticated","setVideoData","result","err","console","error","alert","action","method","className","children","type","name","value","placeholder","onChange","target","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/carlo/OneDrive/Documentos/GitHub/brainboost/frontend/src/components/UrlForm/urlForm.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '@/context/AuthContext';\r\nimport { useData } from '@/context/DataContext';\r\nimport { submitVideo } from '@/services/videoService';\r\n\r\ntype UrlFormProps = {\r\n    setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;\r\n};\r\n\r\nexport default function UrlForm({ setIsLoading }: UrlFormProps) {\r\n\r\n    const [url, setUrl] = useState('');\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        onSubmit(url);\r\n    }\r\n\r\n    const navigate = useNavigate(); //permite navegação de página\r\n    const { isAuthenticated } = useAuth(); //logout removido(adicionar se necessário)\r\n    const { setVideoData } = useData();\r\n\r\n    async function onSubmit(url: string) {\r\n        // Verifica se o usuário está logado\r\n        if (!isAuthenticated) {\r\n            navigate('/plans');\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true); //abre página de espera\r\n\r\n        try {\r\n            const result = await submitVideo(url);\r\n            // Armazenando no localStorage(mudar para backend depois)\r\n            // localStorage.setItem('video_data', JSON.stringify(result));\r\n\r\n            setVideoData(result);\r\n\r\n            setIsLoading(false); //fecha página de espera\r\n            navigate('/questions'); //encaminha para questions\r\n        } catch (err: any) {\r\n            console.error('Erro ao processar vídeo:', err);\r\n            alert('Erro ao processar o vídeo. Verifique o link e tente novamente.');\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form\r\n            action=\"#\"\r\n            method=\"POST\"\r\n            className=\"flex max-w-[100%] gap-2 items-center\"\r\n            onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"url\"\r\n                name=\"videoURL\"\r\n                value={url}\r\n                placeholder=\"Enter a valid YouTube URL\"\r\n                onChange={(e) => setUrl(e.target.value)}\r\n                required\r\n                className=\"flex-1 h-[45px] px-3 rounded-xl border border-gray-300 text-gray-800 shadow-sm outline-none transition duration-300 focus:border-gray-500 focus:shadow-md\"\r\n            />\r\n            <button\r\n                type=\"submit\"\r\n                className=\"h-[45px] px-4 bg-[#325239] text-white rounded-lg font-semibold transition duration-200 hover:shadow-md active:scale-[0.98]\"\r\n            >Pesquisar</button>\r\n        </form>\r\n    )\r\n}"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,WAAW,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMtD,eAAe,SAASC,OAAOA,CAAC;EAAEC;AAA2B,CAAC,EAAE;EAAAC,EAAA;EAE5D,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAElC,MAAMY,YAAY,GAAIC,CAAmC,IAAK;IAC1DA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBC,QAAQ,CAACL,GAAG,CAAC;EACjB,CAAC;EAED,MAAMM,QAAQ,GAAGf,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM;IAAEgB;EAAgB,CAAC,GAAGf,OAAO,CAAC,CAAC,CAAC,CAAC;EACvC,MAAM;IAAEgB;EAAa,CAAC,GAAGf,OAAO,CAAC,CAAC;EAElC,eAAeY,QAAQA,CAACL,GAAW,EAAE;IACjC;IACA,IAAI,CAACO,eAAe,EAAE;MAClBD,QAAQ,CAAC,QAAQ,CAAC;MAClB;IACJ;IAEAR,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;;IAEpB,IAAI;MACA,MAAMW,MAAM,GAAG,MAAMf,WAAW,CAACM,GAAG,CAAC;MACrC;MACA;;MAEAQ,YAAY,CAACC,MAAM,CAAC;MAEpBX,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;MACrBQ,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOI,GAAQ,EAAE;MACfC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;MAC9CG,KAAK,CAAC,gEAAgE,CAAC;MACvEf,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ;EAEA,oBACIF,OAAA;IACIkB,MAAM,EAAC,GAAG;IACVC,MAAM,EAAC,MAAM;IACbC,SAAS,EAAC,sCAAsC;IAChDX,QAAQ,EAAEH,YAAa;IAAAe,QAAA,gBACvBrB,OAAA;MACIsB,IAAI,EAAC,KAAK;MACVC,IAAI,EAAC,UAAU;MACfC,KAAK,EAAEpB,GAAI;MACXqB,WAAW,EAAC,2BAA2B;MACvCC,QAAQ,EAAGnB,CAAC,IAAKF,MAAM,CAACE,CAAC,CAACoB,MAAM,CAACH,KAAK,CAAE;MACxCI,QAAQ;MACRR,SAAS,EAAC;IAA2J;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxK,CAAC,eACFhC,OAAA;MACIsB,IAAI,EAAC,QAAQ;MACbF,SAAS,EAAC,4HAA4H;MAAAC,QAAA,EACzI;IAAS;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjB,CAAC;AAEf;AAAC7B,EAAA,CA3DuBF,OAAO;EAAA,QASVN,WAAW,EACAC,OAAO,EACVC,OAAO;AAAA;AAAAoC,EAAA,GAXZhC,OAAO;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}